plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id 'checkstyle'
}

allprojects {
	group = 'org.yakdanol'
	version = '0.0.1-SNAPSHOT'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':task2')
	implementation project(':task3')
	//implementation project(':task4')
	implementation project(':task5_6')
	implementation project(':task7')
	implementation project(':task8')

	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: [
							'**/model/**' // Исключаем DTO из покрытия Jacoco
					])
				})
		)
	}
}

checkstyle {
	toolVersion = '10.9'
	configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'
	apply plugin: 'checkstyle'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}

	repositories {
		mavenCentral()
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	tasks.named('test') {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}

	jacoco {
		toolVersion = "0.8.12"
	}

	jacocoTestReport {
		reports {
			xml.required = true
			html.required = true
		}
		afterEvaluate {
			classDirectories.setFrom(
					files(classDirectories.files.collect {
						fileTree(dir: it, exclude: ['**/model/**', '**/dto/**']) // Исключаем модели и DTO из покрытия Jacoco
					})
			)
		}
	}

	checkstyle {
		configFile = rootProject.file('config/checkstyle/checkstyle.xml')
	}
}
